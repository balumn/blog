{"version":3,"sources":["components/Blog/index.js","App.js","serviceWorker.js","index.js"],"names":["Blog","react_default","a","createElement","Fragment","className","href","target","key","rel","Component","App","components_Blog","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA6CeA,gMAxCP,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,qBADJ,iGAEIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,4BAAR,qBAGZL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MACXJ,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,2BAA2BC,OAAO,UAA1C,aAERN,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAlB,QACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,UACVJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,SACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,yBAAyBC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAE5FJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,UACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,2BAA2BC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAE9FJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,YACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,sCAAsCC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAEzGJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,iBACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,sCAAsCC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,2BAEzGJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,aACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6CAA6CC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,sBAEhHJ,EAAAC,EAAAC,cAAA,MAAIK,IAAI,MACJP,EAAAC,EAAAC,cAAA,KAAGG,KAAK,sCAAsCC,OAAO,SAASE,IAAI,uBAAsBR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,+BAjC9GK,cCOJC,MANf,WACE,OACEV,EAAAC,EAAAC,cAACS,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1c79b32.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./blog.css\"\nimport \"./mobile.css\"\nclass Blog extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"warning\">\n                    <p>\n                        <b>Warning!</b>This page may contains stupidity. For the same reason I cant allow you to comment on my posts.\n                        <em><a href=\"https://balumn.github.io\"> Abandon Ship!</a></em>\n                    </p>\n                </div>\n                <div className=\"home\">\n                    <div className=\"mh\">\n                        <h1>Thoughts OverFlow!</h1>\n                        <h4><a href=\"https://balumn.github.io\" target=\"_blank\">@balumn</a></h4>\n                    </div>\n                    <button className=\"button\">BLOG</button>\n                    <ul className=\"social\">\n                        <li key=\"email\">\n                            <a href=\"mailto:balumn@ieee.org\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-envelope\"></i></a>\n                        </li>\n                        <li key=\"github\">\n                            <a href=\"http://github.com/balumn\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-github\"></i></a>\n                        </li>\n                        <li key=\"linkedin\">\n                            <a href=\"https://www.linkedin.com/in/balumn/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-linkedin\"></i></a>\n                        </li>\n                        <li key=\"stackOverflow\">\n                            <a href=\"https://stackoverflow.com/cv/balumn\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-stack-overflow\"></i></a>\n                        </li>\n                        <li key=\"instagram\">\n                            <a href=\"https://www.instagram.com/the_hungry_chef_\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-instagram\"></i></a>\n                        </li>\n                        <li key=\"fb\">\n                            <a href=\"https://www.fb.me/balu.m.nandakumar\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-facebook\"></i></a>\n                        </li>\n                    </ul>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Blog;","import React from 'react';\nimport './App.css';\nimport Blog from './components/Blog';\n\nfunction App() {\n  return (\n    <Blog/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}